<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Book | prime factor]]></title>
  <link href="http://succi0303.github.io/blog/categories/book/atom.xml" rel="self"/>
  <link href="http://succi0303.github.io/"/>
  <updated>2018-08-14T23:56:55+00:00</updated>
  <id>http://succi0303.github.io/</id>
  <author>
    <name><![CDATA[succi0303]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA["Release It! Second Edition"を読んだ]]></title>
    <link href="http://succi0303.github.io/blog/2018/08/14/read-release-it-second-edition/"/>
    <updated>2018-08-14T23:50:47+00:00</updated>
    <id>http://succi0303.github.io/blog/2018/08/14/read-release-it-second-edition</id>
    <content type="html"><![CDATA[<p>&ldquo;Release It! Second Edition"を読んだ。</p>

<p>&ldquo;Release It!"というタイトルから、システムのデプロイに焦点を絞った本かと思っていたら全然違った。大雑把にまとめると、本番環境で落ちないシステムを構築するためのノウハウをまとめた本である。</p>

<p><a href="https://www.amazon.co.jp/Release-Design-Deploy-Production-Ready-Software/dp/1680502395?SubscriptionId=AKIAIBGVUCXJLF44YBDA&amp;tag=succi-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=1680502395">Release It!: Design and Deploy Production-Ready Software</a></p>

<p><a href="https://www.amazon.co.jp/Release-Design-Deploy-Production-Ready-Software/dp/1680502395?SubscriptionId=AKIAIBGVUCXJLF44YBDA&amp;tag=succi-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=1680502395"><img src="https://images-fe.ssl-images-amazon.com/images/I/414CRjLjwgL._SL160_.jpg" /></a></p>

<p>とても読み応えがあった。システム構築に関わる人間には全方位におすすめしたい。アプリ・インフラ、設計・実装、オンプレ・クラウド問わず、どの立場でも学ぶ点があると思う。</p>

<p>とくに安定性に関するパターン集(Stability AntipatternsとStability Patterns)は、開発現場の共通言語として認識されて良いものだと思う。安定性に悪影響を与える12のアンチパターンと、安定性の向上に貢献する12のパターンが紹介されている。</p>

<p>著者本人によるパターンの紹介スライドが以下で閲覧できる。</p>

<ul>
<li><a href="https://speakerdeck.com/mtnygard/stability-patterns-and-antipatterns">Stability Patterns &hellip; and Antipatterns - Speaker Deck</a></li>
</ul>


<p>初版の"Release It!&ldquo;は、ほぼ10年前、2007年出版であるらしい。それにしては、CI/CD、カオスエンジニアリング、コンテナオーケストレーションなど、最新に近い話題が盛りだくさんに含まれている。改版にあたってかなりの改訂が入ったものと思われる。
初版の目次をちらっと覗いてみたところ、目次構成からごっそりと変更されているようだ。削られた章もあるようなので、初版も読んでみたいと思った。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「ネスぺ 29 魂」を読んだ]]></title>
    <link href="http://succi0303.github.io/blog/2018/07/26/read-network-specialist-29-spirit/"/>
    <updated>2018-07-26T01:49:41+00:00</updated>
    <id>http://succi0303.github.io/blog/2018/07/26/read-network-specialist-29-spirit</id>
    <content type="html"><![CDATA[<p>「ネスぺ 29 魂」を読んだ。</p>

<p><a href="https://www.amazon.co.jp/%E3%83%8D%E3%82%B9%E3%83%9A-29-%E9%AD%82-%EF%BC%8D%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%B9%E3%83%9A%E3%82%B7%E3%83%A3%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E6%9C%80%E3%82%82%E8%A9%B3%E3%81%97%E3%81%84%E9%81%8E%E5%8E%BB%E5%95%8F%E8%A7%A3%E8%AA%AC-%E5%B7%A6%E9%96%80-%E8%87%B3%E5%B3%B0-ebook/dp/B07C2ZJ1GG?SubscriptionId=AKIAIBGVUCXJLF44YBDA&amp;tag=succi-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=B07C2ZJ1GG">ネスペ 29　魂　－ネットワークスペシャリストの最も詳しい過去問解説</a></p>

<p><a href="https://www.amazon.co.jp/%E3%83%8D%E3%82%B9%E3%83%9A-29-%E9%AD%82-%EF%BC%8D%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%B9%E3%83%9A%E3%82%B7%E3%83%A3%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E6%9C%80%E3%82%82%E8%A9%B3%E3%81%97%E3%81%84%E9%81%8E%E5%8E%BB%E5%95%8F%E8%A7%A3%E8%AA%AC-%E5%B7%A6%E9%96%80-%E8%87%B3%E5%B3%B0-ebook/dp/B07C2ZJ1GG?SubscriptionId=AKIAIBGVUCXJLF44YBDA&amp;tag=succi-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=B07C2ZJ1GG"><img src="https://images-fe.ssl-images-amazon.com/images/I/51muHvU8maL._SL160_.jpg" /></a></p>

<p>昨年の秋に受験した、情報処理技術者試験ネットワークスペシャリストの午後問題（記述式問題）を徹底的に解説した本である。
昨年の受験にあたっては、過去のネスぺシリーズ（基礎力、27礎、26道、25剣）を全て読み、そのおかげもあって無事に合格することができた。</p>

<p>今回は答え合せとして読んだ。試験センターのIPAからも模範解答が公表されているが、問い毎の解説がついていないため、どうしてその解答が正解になるのかよくわからない。しっかりとした答え合わせができる点でも、このシリーズはありがたい存在だと思う。</p>

<p>午後Ⅱは、問２の無線LAN問題を選択して自己採点の結果も良かったが、今回の解説の内容もほぼ理解していた通りで、自分の理解に問題がなかったことを確認できた。</p>

<p>午後Ⅱ、問１のOpenFlow問題は、選択しなくて本当に良かったと改めて思う。</p>

<p>問題があったのは午後Ⅰの問３、ルーティング問題で、本質的な部分はほとんど理解できていなかったことがわかった。ルーティングの問題は、本来的には、最低限の基礎知識と愚直に考える力があれば解けるものだと思うので、なんというか堪え性の無さが出た結果かなと思う。</p>

<p>ネットワークスペシャリストの午後問題は、しっかり読み込むと様々な知識と考え方が身につく、良くできた教材だと思う。ただし、その中で設問が設定される部分は絶妙に浅い。かつ、採点基準はめちゃくちゃ甘い。というのが、個人的な合格体験から得た率直な感想である。なので、現在ネットワークスペシャリストの勉強をされている方におかれては、午後問題のぱっと見の重さに心を折られる必要はありませんよ、という点を伝えておきたいと思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["Learn Functional Programming With Elixir"を読んだ]]></title>
    <link href="http://succi0303.github.io/blog/2018/07/24/read-learn-functional-programming-with-elixir/"/>
    <updated>2018-07-24T01:14:18+00:00</updated>
    <id>http://succi0303.github.io/blog/2018/07/24/read-learn-functional-programming-with-elixir</id>
    <content type="html"><![CDATA[<p>&ldquo;Learn Functional Programming with Elixir"を読んだ。</p>

<p><a href="https://www.amazon.co.jp/Learn-Functional-Programming-Elixir-Foundations-ebook/dp/B07BRDXN4B?SubscriptionId=AKIAIBGVUCXJLF44YBDA&amp;tag=succi-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=B07BRDXN4B">Learn Functional Programming with Elixir: New Foundations for a New World (The Pragmatic Programmers)</a></p>

<p><a href="https://www.amazon.co.jp/Learn-Functional-Programming-Elixir-Foundations-ebook/dp/B07BRDXN4B?SubscriptionId=AKIAIBGVUCXJLF44YBDA&amp;tag=succi-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=B07BRDXN4B"><img src="https://images-fe.ssl-images-amazon.com/images/I/51BU3yEPxDL._SL160_.jpg" /></a></p>

<p>Elixirの解説を通じて、関数型プログラミングの考え方を身につけようという趣旨の本である。
タイトルの印象からは「関数型プログラミング」に重きを置いているように見えるが、実際に読んだ印象では「速習Elixir」くらいのタイトルが相応しいのではないかと感じた。</p>

<p>正直に言えば、関数型プログラミングの書籍としては物足りなかった。</p>

<p>パターンマッチ、再帰処理、高階関数にそれぞれ一章が割り当てられているが、モナド、カリー化などの話題は出てこない。手続き型、オブジェクト指向との違いが感じられるのはパターンマッチくらいだろうか。</p>

<p>Elixir自体が、オブジェクト指向言語（主にRuby）使用者が気軽に扱える関数型言語という立ち位置だと思うので、Elixir入門としてはこのくらいで十分と言えるのかもしれない。</p>

<p>関数型プログラミングの考え方自体を楽しみたいという場合には、少し無理をしてでも厚めのHaskellの本を読むのが良さそうだと思った。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["The Cucumber Book, 2nd Edition"を読んだ]]></title>
    <link href="http://succi0303.github.io/blog/2018/07/07/read-the-cucumber-book-2nd-edition/"/>
    <updated>2018-07-07T03:33:22+00:00</updated>
    <id>http://succi0303.github.io/blog/2018/07/07/read-the-cucumber-book-2nd-edition</id>
    <content type="html"><![CDATA[<p>&ldquo;The Cucumber Book, 2nd Edition"を読んだ。</p>

<p>ビヘイビア駆動開発のためのテストツール、cucumberの解説書である。</p>

<p><a href="https://www.amazon.co.jp/Cucumber-Book-Behaviour-Driven-Development-Developers-ebook/dp/B06XR5S98S?SubscriptionId=AKIAIBGVUCXJLF44YBDA&amp;tag=succi-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=B06XR5S98S">The Cucumber Book: Behaviour-Driven Development for Testers and Developers</a></p>

<p><a href="https://www.amazon.co.jp/Cucumber-Book-Behaviour-Driven-Development-Developers-ebook/dp/B06XR5S98S?SubscriptionId=AKIAIBGVUCXJLF44YBDA&amp;tag=succi-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=B06XR5S98S"><img src="https://images-fe.ssl-images-amazon.com/images/I/51h4PzZ3wDL._SL160_.jpg" /></a></p>

<p>私が初めて読み通した英語の書籍が、確かこの本の1st Editionだったと思う。1st Edtionと2nd Editionの違いは、各種ツールの最新版（cucumber 2.4、Rails 5、RSpec 3.5)に対応した点のみのようである。</p>

<p>cucumberの特徴は、Gherkinと呼ばれるシステムの振る舞いを記述する書式である。cucumberはGherkinを解釈して自動的にテストを実行する。</p>

<p>Gherkinは、プログラム言語よりも一般言語に近く、ノンプログラマが読み書きできるように設計されている。そこで、システムの開発者=プログラマではなく、システムの利用者=顧客、プロダクトオーナーにGherkinの仕様を書いてもらうことで、仕様の齟齬をなくし、受入テストを自動化してしまおうというのがcucumberの思想である。</p>

<p>現実のプロジェクトに適用するには相当の面倒を伴うと思うが、まずは開発者がビヘイビア駆動の考え方を学ぶ教材として、優れたツールだと思っている。</p>

<p>TDD、BDD系の書籍は写経しながらテストを実行して、自分で結果を確認できるのが楽しい。言語はRubyだし、息抜きとしてさらっと読むことができた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["Tmux 2"を読んだ]]></title>
    <link href="http://succi0303.github.io/blog/2018/07/03/read-tmux-2/"/>
    <updated>2018-07-03T07:03:07+00:00</updated>
    <id>http://succi0303.github.io/blog/2018/07/03/read-tmux-2</id>
    <content type="html"><![CDATA[<p>&ldquo;tmux 2"を読んだ。</p>

<p>ターミナルマルチプレクサ、tmuxの解説本である。2012年出版の"tmux"の第2版であるが、2016年の出版であり、最新情報という訳ではない。</p>

<p><a href="https://www.amazon.co.jp/tmux-2-Productive-Mouse-Free-Development/dp/1680502212?SubscriptionId=AKIAIBGVUCXJLF44YBDA&amp;tag=succi-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=1680502212">tmux 2: Productive Mouse-Free Development</a></p>

<p><a href="https://www.amazon.co.jp/tmux-2-Productive-Mouse-Free-Development/dp/1680502212?SubscriptionId=AKIAIBGVUCXJLF44YBDA&amp;tag=succi-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=1680502212"><img src="https://images-fe.ssl-images-amazon.com/images/I/413SRHn9MyL._SL160_.jpg" /></a></p>

<p>改版による変更点は以下の通りである。</p>

<ul>
<li>tmux 2.3への対応</li>
<li>Windows 10、Windows Subsystem for Linuxへのインストール</li>
<li>&ldquo;Chapter 2, Configuring tmux"、設定の追加、変更

<ul>
<li>アクティブなペインを特定する</li>
<li>アップデートされたビジュアルスタイルの設定方法への対応</li>
<li>無効になった設定の削除</li>
</ul>
</li>
<li>&ldquo;Chapter 3, Scripting Customized tmux Environments&rdquo;

<ul>
<li>Tmuxinatorのアップデートされた命令への対応</li>
<li>Tmuxinatorの新しい設定フォーマットへの対応</li>
<li>Tmuxinatorからtmuxのスクリプトをエクスポートする方法を追加</li>
</ul>
</li>
<li>&ldquo;Chapter 4, Working With Text and Buffers&rdquo;

<ul>
<li>LinuxとMacのシステムクリップボードへのアクセス方法の変更</li>
</ul>
</li>
<li>&ldquo;Chapter 5, Pair Programming with tmux&rdquo;

<ul>
<li>SSH鍵の生成方法の追加</li>
<li>tmateの紹介</li>
</ul>
</li>
<li>&ldquo;Chapter 6, Workflow"、セクションの追加

<ul>
<li>カレントディレクトリを維持してペインを開く</li>
<li>特定の設定を分離する</li>
<li>Vimとシームレスに統合する</li>
<li>プラグインによる拡張</li>
</ul>
</li>
</ul>


<p>手元の<code>.tmux.conf</code>は旧版を元に設定していたので、今回読んだ新版の内容にアップデートした。</p>

<p>悩ましいのは旧版を元にQiitaに投稿した記事「達人に学ぶ.tmux.confの基本設定」である。ありがたいことに、あちらの記事は今も結構な勢いで「いいね」を集めているが、今回"tmux 2"を読んで、記事の設定内容が古くなっていることを実感した。古い情報を拡散し続けている状況が、少々心苦しい。</p>

<p>今更ではあるが、近いうちにQiitaの記事を"tmux 2"対応に更新することを計画中である。</p>
]]></content>
  </entry>
  
</feed>
